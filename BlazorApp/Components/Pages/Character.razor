@page "/Character/{realm}/{name}"
@inject IAppCache cache;
@inject FluentClient client;



@if (dataLoaded)
{
    if (!characterLookupModel.SuccessfullyRetrievedCharacter)
    {
        <PageTitle>Failed to get data</PageTitle>
        <p class="text-red-500 text-xl text-center">Failed to retrieve character. Please try again later.</p>
    } else {

    var characterData = characterLookupModel.RaiderIOCharacterData;
    if (characterLookupModel.RaiderIOCharacterData.raid_progression.amirdrassilthedreamshope != null)
    {
        var raidData = characterLookupModel.RaiderIOCharacterData.raid_progression.amirdrassilthedreamshope;
        int normalBossesKilled = raidData.normal_bosses_killed;
        int heroicBossesKilled = raidData.heroic_bosses_killed;
        int mythicBossesKilled = raidData.mythic_bosses_killed;
    }
    var mythicPlusData = characterLookupModel.RaiderIOCharacterData.mythic_plus_weekly_highest_level_runs;
    var top8Dungeons = characterLookupModel.DungeonVaultSlots.Take(8).ToList();
    <PageTitle>@characterData.name</PageTitle>
    <div style="color:@characterLookupModel.classColor" class="flex justify-center items-center pt-5 flex-wrap">
        <img class="" src="@characterData.thumbnail_url" />
        <h1 class="text-2xl pl-2">
            <a href="@(characterData.profile_url)" target="_blank" class="hover:text-inherit">
                @(characterData.name)
            </a>
            <br />
                @if (characterData.guild != null)
                {
                    <a href="@($"https://worldofwarcraft.blizzard.com/en-us/guild/{characterData.region}/{characterData.guild.realm}/{characterData.guild.name}")" target="_blank" class="hover:text-inherit">&lt;@(characterData.guild.name
            )&gt;</a>
                }
        </h1>
        <h2 class="text-xl md:pl-28 pt-1 text-center w-full">Item Level @characterData.gear.item_level_equipped @characterData.active_spec_name @characterData.char_class</h2>
    </div>
    }    
}


@code {


    [Parameter]
    public string realm { get; set; }
    [Parameter]
    public string name { get; set; }

    public CharacterLookupModel characterLookupModel = new();
    public bool dataLoaded;

    public class KeyItemLevel
    {
        public int KeyLevel { get; set; }
        public int ItemLevel { get; set; }
    }
    //  private readonly FluentClient client;

    public Character()
    {
        cache = new CachingService();
        client = new();
        characterLookupModel = new();
    }
    protected override async Task OnInitializedAsync()
    {
        characterLookupModel = await GetCharacterAsync();
    }

    private async Task<CharacterLookupModel> GetCharacterAsync()
    {
        string cacheKey = $"GetCharacter_{name}_{realm}";

        return await cache.GetOrAddAsync(cacheKey, async () =>
        {
            try
            {
                RaiderIOCharacterDataModel ResponseData = await client
               .GetAsync("https://raider.io/api/v1/characters/profile")
               .WithArgument("region", "us")
               .WithArgument("name", name)
               .WithArgument("realm", realm.Replace(" ", "-"))
               .WithArgument("fields", "raid_progression,mythic_plus_weekly_highest_level_runs,guild,gear")
               .As<RaiderIOCharacterDataModel>();

                Dictionary<string, string> KeysData = await client
                    .GetAsync("https://localhost:7031/api/v1/mythicplus/keystone-vault-reward")
                    .As<Dictionary<string, string>>();
                var dictionary = new Dictionary<int, int>();
                foreach (var kvp in KeysData)
                {
                    dictionary.Add(int.Parse(kvp.Key), int.Parse(kvp.Value));
                }
             
                characterLookupModel.MythicKeystoneValues = dictionary;
                characterLookupModel.RaiderIOCharacterData = ResponseData;

                List<int> intList = await GetDungeonVaultSlots(ResponseData, characterLookupModel.MythicKeystoneValues);
                characterLookupModel.DungeonVaultSlots = intList;

                string color = await GetClassColor();
                characterLookupModel.classColor = color;

                characterLookupModel.SuccessfullyRetrievedCharacter = true;
                dataLoaded = true;

                return characterLookupModel;
            }
            catch
            {
                characterLookupModel.SuccessfullyRetrievedCharacter = false;
                dataLoaded = true;
                return characterLookupModel;
            }

        }, TimeSpan.FromMinutes(15));
    }
    public class ClassNameColor
    {
        public string ClassName { get; set; }
        public string ClassColor { get; set; }
    }
    private static Task<List<int>> GetDungeonVaultSlots(RaiderIOCharacterDataModel characterData, Dictionary<int, int> mythicKeystoneValues)
    {
        List<int> intList = [];

        foreach (var run in characterData.mythic_plus_weekly_highest_level_runs)
        {
            if (mythicKeystoneValues.TryGetValue(run.mythic_level, out int value))
            {
                intList.Add(value);
            }
            else if (run.mythic_level > 20)
            {
                // If the key level is greater than 20, assign the maximum score
                intList.Add(mythicKeystoneValues[20]);
            }
        }

        intList = [.. intList.OrderByDescending(x => x)];

        return Task.FromResult(intList);
    }
    private async Task<string> GetClassColor()
    {
        //  Dictionary<string, string> classMap = await _context.tbl_ClassData.ToDictionaryAsync(i => i.ClassName, i => i.ClassColor);
        List<ClassNameColor> classMap = await client
      .GetAsync("https://localhost:7031/api/v1/general/class?getColor=true")
      .As<List<ClassNameColor>>();

        string classNameToFind = characterLookupModel.RaiderIOCharacterData.char_class;
        string color = "black"; // Default color if not found

        // Iterate through the list to find the matching class name
        foreach (var item in classMap)
        {
            if (item.ClassName == classNameToFind)
            {
                color = item.ClassColor; // Assign the color if the class name is found
                break; // Exit the loop once the match is found
            }
        }



        return color;
    }
}
